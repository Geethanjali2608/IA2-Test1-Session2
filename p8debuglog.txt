 gcc -g p8final.c
 ./a.out
enter no. of inputs:
4
enter base:
2
enter altitude:
3
enter base:
4
enter altitude:
5
enter base:
6
enter altitude:
7
enter base:
8
enter altitude:
9
the smallest of triangles with base and height
2.000000,3.000000
4.000000,5.000000
6.000000,7.000000
and 8.000000,9.000000 is
triangle with base 2.000000,3.000000 whose area is 3.000000 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0xb47: file p8final.c, line 66.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2-1/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p8final.c:66
66  {
(gdb) n
68    n=input_n();
(gdb) s
input_n () at p8final.c:8
8   {
(gdb) n
10    printf("enter no. of inputs:\n");
(gdb) n
enter no. of inputs:
11    scanf("%d",&n);
(gdb) n
2
12    return n;
(gdb) n
13  }
(gdb) n
main () at p8final.c:69
69    Triangle t[n];
(gdb) n
70    input_n_triangle(n,t);
(gdb) s
input_n_triangle (n=2, t=0x7ffce0f9b5c0) at p8final.c:25
25    for(int i=0;i<n;i++)
(gdb) n
27        t[i]=input_triangle();
(gdb) n
enter base:
2
enter altitude:
3
25    for(int i=0;i<n;i++)
(gdb) n
27        t[i]=input_triangle();
(gdb) n
enter base:
4
enter altitude:
5
25    for(int i=0;i<n;i++)
(gdb) n
29  }
(gdb) n
main () at p8final.c:71
71    find_areas_n(n,t);
(gdb) s
find_areas_n (n=2, t=0x7ffce0f9b5c0) at p8final.c:36
36    for(int j=0;j<n;j++)
(gdb) n
38        find_area(&t[j]); 
(gdb) n
36    for(int j=0;j<n;j++)
(gdb) n
38        find_area(&t[j]); 
(gdb) n
36    for(int j=0;j<n;j++)
(gdb) n
40  }
(gdb) n
main () at p8final.c:73
73    small=find_smallest_triangle(n,t);
(gdb) s
find_smallest_triangle (n=2, t=0x7ffce0f9b5c0) at p8final.c:44
44    small=t[0];
(gdb) n
45    for(int i=1;i<n;i++)
(gdb) p small
$1 = {base = 2, altitude = 3, area = 3}
(gdb) n
47        if(small.area>t[i].area)
(gdb) p t[0]
$2 = {base = 2, altitude = 3, area = 3}
(gdb) n
45    for(int i=1;i<n;i++)
(gdb) n
52   return small;
(gdb) n
53  }
(gdb) p small
$3 = {base = 2, altitude = 3, area = 3}
(gdb) n
main () at p8final.c:74
74    output(n,t,small);
(gdb) s
output (n=2, t=0x7ffce0f9b5c0, small=...) at p8final.c:56
56    printf("the smallest of triangles with base and height\n");
(gdb) n
the smallest of triangles with base and height
57    for(int i=0;i<n-1;i++)
(gdb) n
59        printf("%f,%f\n",t[i].base,t[i].altitude);
(gdb) n
2.000000,3.000000
57    for(int i=0;i<n-1;i++)
(gdb) n
61    printf("and %f,%f is\n",t[n-1].base,t[n-1].altitude);
(gdb) n
and 4.000000,5.000000 is
62    printf("triangle with base %f,%f whose area is ",small.base,small.altitude);
(gdb) n
63    printf("%f",small.area);
(gdb) n
64  }
(gdb) n
main () at p8final.c:75
75    return 0;
(gdb) n
76  }(gdb)